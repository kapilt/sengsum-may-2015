Docker, Docker, Docker
Inside the world of Containers
20 May 2015

Kapil.Thangavelu@capitalone.com
http://github.com/kapilt
@kapilvt


* Outline

- Why Linux Containers

- How do Containers Work
  - Namespaces
  - Cgroups
  - FS Layers
  
- Docker Practical
  - Running Containers
  - Building/Publishing Containers
  - Composing Containers
  - Storage / Volumes
  - Networking

- Bonus Material

* Why Containers

To Solve Application Delivery
 
- How do we deploy apps to production?

- How do we setup a development environment?

- How do we install new software?

- I've got 99 microservices and 5 servers

* Many Payloads

- Backends in multiple languages

- databases / bigdata / caches

- analytics / background workers

- webapps

* Many Targets

- Local Development

- Cloud Environments 

- Staging Servers

- CI/CD Pipelines

- Baremetal

- etc

* Separation of Concerns

_Developer_ - Inside the Container
  - my code
  - my library
  - my packages
  
_Operations_ - Outside the container
  - logging
  - access
  - monitoring
  - network

* How does it work

Isolation with namespaces
 
- (net) network namespaces
- (mnt) filesystem
- (pid) process
- (user) this is not the root we're looking for
- (ipc) 
- (uts) hostname

Namespace Article

.link http://lwn.net/Articles/531114/

* How does it work

Resource limits with cgroups

- memory (amount)
- cpu (amount and binding)
- blkio (rate limit)
- devices (allowed to create)
- net (classify and priority)

Cgroups Documentation

.link https://www.kernel.org/doc/Documentation/cgroups/

Can specify both hard and soft limits, ie. allow bursting

* Efficiency

Almost no overhead

- Process isolation

- CPU Performance = native perf

- IO Performance = native perf

- CGroup accounting ~ 3%

* Image Layers

Shell:

  FROM ubuntu:14.04
  RUN apt-get install -y mysql-server python-dev python-virtualenv git
  RUN virtualenv 
  RUN git clone https://github.com/myproject/mycode.git
  RUN python mycode/setup.py install

* Image Layer via Filesystems

- union filesystems (aufs, overlayfs)

- snapshotting cow filesystems (btrfs, zfs)

- cow via lvm/device mapper with thin provisioning

.image docker/unionfs.png

* Compare to VMs

.image docker/docker-vm-vs-container.png

* Efficiency == Productivity

- Containers in Seconds

- VMs in Minutes

- Kbs for a new containers vs. Gb for VMs

- Easy sharing


* Docker

- opensource engine to commoditize containers / April 2013

- massive uptake / it has popularized containers

- rich ecosystem of tools on top

- targets application containers

Previous: Solaris Zones, FreeBSD Jails, LXC

* Docker components

.image docker/components.png


* Docker Tutorial

 https://www.docker.com/tryit/

* Dockerfiles

Best Practice to build an Image

.code docker/SimpleDockerFile

docker build . -t me/myapp:20150519
docker push me/myapp:20150519


* Docker Image URL

 owner/image:tag

There's a set of official images which don't have 'owner'

.link https://github.com/docker-library/official-images/tree/master/library

ie. ubuntu, mysql, golang, python, ruby, nodejs

Use tag to version, implicit version is latest

* Docker Compose

- Use Links to connect containers

.link https://docs.docker.com/userguide/dockerlinks/

- Use compose to fire up multiple containers

.code docker/compose.yaml

  $ docker-compose up
  Pulling image redis...
  Building web...
  Starting composetest_redis_1...
  Starting composetest_web_1...
  redis_1 | [8] 02 Jan 18:43:35.576 # Server started, Redis version 2.8.3
  web_1   |  * Running on http://0.0.0.0:5000/

* Storage / Volumes

- Data Volumes

- Bind mount directories


* Hosted Containers

- Google (GKE)

- Amazon (ECS)

- Tutum.co


* Multi-Host Networking

Default each container gets a private address address behind NAT
bridge.

- Port Forward and Host Networking (-p)

- Flannel

- Weave


* Opensource Management Engines

 - Kubernetes

 - Swarm + Compose

 - Flocker

 - Containership.io

 - Rancher.io

 - +99 others

* Other container engines

 - Rkt (Rocket) from CoreOS
   - standards based image format
   - no daemon
   - containers run directly under pid 1

 - LXC
   - grandpa of contaniners (along with openvz)
   - cli and library based (c, golang, python, etc)
   - support for image templates and images.
   
 - LXD
  - os containers
  - image based
  - rest api daemon



